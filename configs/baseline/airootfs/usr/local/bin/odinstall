#!/usr/bin/env python

from pathlib import Path

from archinstall import Installer
from archinstall import profile
from archinstall.default_profiles.minimal import MinimalProfile
from archinstall import disk
from archinstall import models

import os

device_path_value = os.getenv('DEVICE_PATH')
if device_path_value is None:
    raise ValueError('No DEVICE_PATH environment variable set')

hostname = os.getenv('HOSTNAME')
if hostname is None:
    raise ValueError('No HOSTNAME environment variable set')

username = os.getenv('USERNAME')
if username is None:
    raise ValueError('No USERNAME environment variable set')

password = os.getenv('PASSWORD')
if password is None:
    raise ValueError('No PASSWORD environment variable set')

# we're creating a new ext4 filesystem installation
fs_type = disk.FilesystemType('ext4')
device_path = Path(device_path_value)

# get the physical disk device
device = disk.device_handler.get_device(device_path)

if not device:
	raise ValueError('No device found for given path')

# create a new modification for the specific device
device_modification = disk.DeviceModification(device, wipe=True)

# create a new boot partition
boot_partition = disk.PartitionModification(
	status=disk.ModificationStatus.Create,
	type=disk.PartitionType.Primary,
	start=disk.Size(1, disk.Unit.MiB, device.device_info.sector_size),
	length=disk.Size(512, disk.Unit.MiB, device.device_info.sector_size),
	mountpoint=Path('/boot'),
	fs_type=disk.FilesystemType.Fat32,
	flags=[disk.PartitionFlag.Boot]
)
device_modification.add_partition(boot_partition)

# create a root partition
root_partition = disk.PartitionModification(
	status=disk.ModificationStatus.Create,
	type=disk.PartitionType.Primary,
	start=disk.Size(513, disk.Unit.MiB, device.device_info.sector_size),
	length=disk.Size(20, disk.Unit.GiB, device.device_info.sector_size),
	mountpoint=Path('/'),
	fs_type=fs_type,
	mount_options=[],
)
device_modification.add_partition(root_partition)

start_home = root_partition.length
length_home = device.device_info.total_size - start_home

# create a new home partition
home_partition = disk.PartitionModification(
	status=disk.ModificationStatus.Create,
	type=disk.PartitionType.Primary,
	start=start_home,
	length=length_home,
	mountpoint=Path('/home'),
	fs_type=fs_type,
	mount_options=[]
)
device_modification.add_partition(home_partition)

disk_config = disk.DiskLayoutConfiguration(
	config_type=disk.DiskLayoutType.Default,
	device_modifications=[device_modification]
)

# initiate file handler with the disk config and the optional disk encryption config
fs_handler = disk.FilesystemHandler(disk_config)

# perform all file operations
# WARNING: this will potentially format the filesystem and delete all data
fs_handler.perform_filesystem_operations(show_countdown=False)

mountpoint = Path('/mnt')

with Installer(
	mountpoint,
	disk_config,
	kernels=['linux']
) as installation:
	installation.mount_ordered_layout()
	installation.minimal_installation(hostname=hostname)
	installation.add_additional_packages([
        'bat',
        'bat-extras',
        'chromium',
        'fd',
        'fuse-overlayfs',
        'git-delta',
        'grub',
        'kde-applications',
        'lsd',
        'micro',
        'networkmanager',
        'noto-fonts',
        'noto-fonts-cjk',
        'noto-fonts-emoji',
        'noto-fonts-extra',
        'obs-studio',
        'plasma',
        'podman',
        'sddm',
        'xorg-drivers',
        'xorg-server',
    ])

installation.genfstab()

installation.arch_chroot('grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB --removable')
installation.arch_chroot('grub-mkconfig -o /boot/grub/grub.cfg')

enable_units = [
    'NetworkManager.service',
    'sddm.service',
]
for unit in enable_units:
    installation.arch_chroot(f'systemctl enable {unit}')

# Optionally, install a profile of choice.
# In this case, we install a minimal profile that is empty
profile_config = profile.ProfileConfiguration(MinimalProfile())
profile.profile_handler.install_profile_config(installation, profile_config)

user = models.User(username, password, True)
installation.create_users(user)
